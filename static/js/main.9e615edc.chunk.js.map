{"version":3,"sources":["components/Header.js","components/MainContent.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Component","MainContent","props","handleChange","event","setState","filter","target","value","state","newItem","amt","nw","exLimit","list","exlist","joineddata","this","addItem","deductWorth","alertExpense","addWorth","a","parseInt","l","alert","key","ts","cid","Math","random","today","Date","date","getFullYear","getMonth","getDate","id","slice","currentDate","push","lowercasedFilter","toLowerCase","filteredData","item","Object","keys","some","includes","type","onChange","e","updateInput","onClick","expenseButton","incomeButton","placeholder","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9e615edc.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Header extends Component{\nrender(){\n    return(\n      <div className=\"header\">\n          <h1>Money Tracker</h1>\n      </div>\n    );\n}\n}\n\nexport default Header;","import React, { Component } from 'react';\n\nclass MainContent extends Component{\n\n  constructor(props){\n    super(props);\n    this.state={\n          newItem:\"\",\n          amt:\"\",\n          nw: 0,\n          exLimit:0,\n          list:[],\n          exlist:[],\n          filter:\"\",\n          joineddata:\"\",\n        }\n      }\n      handleChange = event => {\n        this.setState({ filter: event.target.value });\n      };\n\n  expenseButton(){\n     var t=\"EXPENSE\";\n     this.addItem(t);\n     this.deductWorth();\n     this.alertExpense();\n  }\n  incomeButton(){\n    var t=\"INCOME\";\n  this.addItem(t);\n  this.addWorth();\n  }\n\naddWorth(){\n  var a= parseInt(this.state.amt,10);\n  \n  var nw=parseInt(this.state.nw);\n  this.setState({nw: nw+a})\n}\n\ndeductWorth(){\n  var a= parseInt(this.state.amt,10);\n  \n  var nw=parseInt(this.state.nw);\n  this.setState({nw: nw-a})\n}\n\nalertExpense(){\n  var a= parseInt(this.state.amt,10);\n  var l= parseInt(this.state.exLimit,10);\n   if(a>l && l>0){\n    alert(\"You are exceeding your Expense limit\");\n  }\n}\n\n     updateInput(key, value){\n        this.setState({\n          [key]: value\n          })\n      }\n   \n      addItem(ts){\n        var cid=1+Math.random();\n        var today= new Date(),\n        date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\n \n        const joineddata={\n          id: cid,\n          value: ts+\"\\xa0\\xa0\\xa0\\xa0\"+this.state.newItem.slice()+\"\\xa0\\xa0\"+this.state.amt.slice()+\" INR\",\n          currentDate:date\n         }\n      \n        const exLimit={\n          id: 1+Math.random(),\n        };\n\n        const exlist=[this.state.list];\n        exlist.push(exLimit);\n        const list=[...this.state.list];\n        \n        list.push(joineddata);\n        this.setState(\n          {\n            list,\n            exlist, \n            newItem:\"\",\n            amt:\"\",\n            joineddata:\"\"\n    \n          }\n        )\n      }\n\n    render(){\n\n      const { filter, list } = this.state;\n      const lowercasedFilter = filter.toLowerCase();\n      const filteredData = list.filter(item => {\n        return Object.keys(item).some(key =>\n          item.value.toLowerCase().includes(lowercasedFilter)\n        );\n      });\n\n      return(\n\n        <div className=\"Content\">\n\n            <div className=\"c1 c11 whitecolor\">\n            <span className=\"h1\">BALANCE</span>\n                  <span className=\"totalMoney\">\n                      {this.state.nw}<span> INR</span>\n                  </span>\n            </div>\n              \n              <div className=\"c1 ht whitecolor\">\n                  <span className=\"h1\">EXPENSE LIMIT</span>\n                  <span className=\"limitMoney\">\n                      {this.state.exLimit}<span> INR</span>\n                  </span>\n                  <br/>\n                  <hr/>\n                  <div className=\"Forms\">\n                    \n                  <label >Set Expense Limit</label>\n                  <input\n                  type=\"number\" \n                  onChange={e=>this.updateInput(\"exLimit\", e.target.value)}\n                  />\n                  <br/>\n                  </div>\n                  </div>\n \n              <div className=\"section-box whitecolor\">\n              \n              <div className=\"h2\">\n                  <span className=\"h1\">NEW TRANSACTION</span>\n              </div>\n              <hr/>\n              <br/>\n             \n              <div className=\"Forms\">\n                    \n              <label >INR</label><br/>\n              <input className=\"input1\" type=\"number\" \n              value={this.state.amt}\n              onChange={e=>this.updateInput(\"amt\", e.target.value)}\n              /><br/>\n              <label >Add Category</label><br/>\n              <input className=\"input1\" type=\"text\" \n              value={this.state.newItem}\n              onChange={e=>this.updateInput(\"newItem\", e.target.value)}\n              /><br/>\n              \n              <div className=\"AddButtons\">\n              <button className=\"b3\"\n              onClick={()=>this.expenseButton()}\n              >Add Expense</button>\n\n              <button className=\"b8\"\n              onClick={()=>this.incomeButton()}\n              >Add Income</button>\n              </div>\n              </div>\n            </div>\n            <br/>\n\n            <div className=\"section-box5 whitecolor\">\n\n            <div className=\"h2\">\n              <span className=\"h1\">TRANSACTIONS</span>\n            </div>\n            <br/>\n            <div className=\"filter \">\n            <input className=\"filtersearch\" onChange={this.handleChange} placeholder=\"Search\"/>\n            </div>\n \n            <div className=\"ac\" >\n            {filteredData.map(item => (\n          <div key={item.id}>\n            <div className=\"transData\">\n              {item.value}\n            <span className=\"date\">{item.currentDate}</span>\n            </div>\n            <hr/>\n          </div>\n        )\n        )\n        }\n         </div>\n         </div>   \n          </div>\n        );\n    }\n}\n\nexport default MainContent;","import React from 'react';\nimport Header from './components/Header.js';\nimport MainContent from './components/MainContent.js';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Header/>\n     <MainContent/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}